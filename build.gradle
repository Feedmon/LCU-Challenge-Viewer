buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
    id 'maven-publish'
    id "org.liquibase.gradle" version "2.1.1"
    id "com.github.psxpaul.execfork" version "0.2.0"
    id "com.github.node-gradle.node" version "7.0.2"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.2"
    id "com.github.johnrengelman.processes" version "0.5.0"
}

apply plugin: 'java'

group = 'feedmon'
version = '1.0.0'


jar {
    manifest {
        attributes 'Implementation-Title': 'LCU Challenge Viewer'
        attributes 'Implementation-Version': version
        attributes 'provider': 'Feedmon'
        attributes 'Build-With': 'gradle-' + gradle.gradleVersion
        attributes 'Build-Time': new Date().format("yyyy-MM-dd HH:mm")
        attributes 'Build-User': System.getProperty("user.name")
    }
}

publishing {
    publications {
        main(MavenPublication){
            from components.java
            artifact jar
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

ext {
    JVM_ARGUMENTS = [
            '-Dfile.encoding=UTF-8',
            '-Xmx1536m',
            '-Duser.language=de',
            '-Duser.country=CH'
    ].flatten()
    JavaExecFork = com.github.psxpaul.task.JavaExecFork
    ExecFork = com.github.psxpaul.task.ExecFork
    OpenApiGeneratorTask = org.springdoc.openapi.gradle.plugin.OpenApiGeneratorTask
}

configurations {
    webApp
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // LCU Connector
    implementation 'com.github.stirante:lol-client-java-api:1.1.7'

    implementation 'com.github.javaparser:javaparser-core:3.13.5'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // this imports openapi web url thingy
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

apply from: './gradle/bootJar.gradle'
apply from: './gradle/clean.gradle'
apply from: './gradle/code-analysis.gradle'
apply from: './gradle/cypress.gradle'
apply from: './gradle/frontend.gradle'
apply from: './gradle/java21.gradle'
apply from: './gradle/jvmArguments.gradle'
apply from: './gradle/liquibase.gradle'
apply from: './gradle/openapi.gradle'
apply from: './gradle/run.gradle'
apply from: './gradle/tests.gradle'

sourceSets {
    test {
        java {}
    }

    integrationTest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
        java { srcDirs = ["src/integration-test/java"] }
        resources { srcDir file("src/integration-test/resources") }
    }
}

