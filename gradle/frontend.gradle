apply plugin: "com.github.node-gradle.node"

node {
    nodeModulesDir = file("${project.projectDir}/frontend")
}

npmInstall {
    inputs.file("${project.projectDir}/frontend/package.json")
            .withPropertyName("packages")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/package-lock.json")
            .withPropertyName("packagesLock")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.cacheIf { true }
    outputs.dir("${project.projectDir}/frontend/node_modules")
            .withPropertyName("node-modules")
    outputs.dir("${project.projectDir}/frontend/package-lock.json")
            .withPropertyName("packages-lock")
}

task buildFrontend(type: NpmTask, dependsOn: [npmInstall, "lintFrontend"]) {
    args = ["run", "build"]

    inputs.file("${project.projectDir}/frontend/package.json")
            .withPropertyName("packages")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/package-lock.json")
            .withPropertyName("packagesLock")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/src")
            .withPropertyName("src")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir("${project.projectDir}/frontend/dist")
            .withPropertyName("dist")
}

task startFrontend(type: NpmTask, dependsOn: npmInstall) {
    //  description: "runs the application frontend. "
    group = "build"

    args = ["run", "start"]

    inputs.file("${project.projectDir}/frontend/package.json")
            .withPropertyName("packages")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/package-lock.json")
            .withPropertyName("packagesLock")
            .withPathSensitivity(PathSensitivity.RELATIVE)
}

task lintFrontend(type: NpmTask, dependsOn: npmInstall) {
    //  description: "runs eslint"
    group = "verification"

    args = ["run", "lint"]

    inputs.file("${project.projectDir}/frontend/package.json")
            .withPropertyName("packages")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/package-lock.json")
            .withPropertyName("packagesLock")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/src")
            .withPropertyName("src")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.upToDateWhen { false }
}

check.dependsOn lintFrontend

task ngOpenApiGen(type: NpmTask, dependsOn: npmInstall) {
    description = "runs ng-openai-gen"
    group = "generation"

    args = ["run", "ng-openapi-gen"]

    inputs.file("${project.projectDir}/frontend/package.json")
            .withPropertyName("packages")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/package-lock.json")
            .withPropertyName("packagesLock")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/ng-openapi-gen.json")
            .withPropertyName("ng-openapi-gen")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${project.projectDir}/frontend/api.json")
            .withPropertyName("api")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir("${project.projectDir}/frontend/src/backend-api/api")
            .withPropertyName("generated-backend-api")
}

test.configure { shouldRunAfter ngOpenApiGen }

task cleanGeneratedApi(type: Delete) {
    delete file("${project.projectDir}/frontend/src/backend-api/api")
}

task frontendTest(type: NpmTask, dependsOn: [npmInstall, ngOpenApiGen]) {
    description = "run Karma Tests"
    group = "verification"

    args = ["run", "test:ci"]
    description = "runs karma tests configured at frontend \\karma.conf.js"
}

frontendTest.configure { shouldRunAfter test }

// integrationTest.configure { shouldRunAfter frontendTest }

check.dependsOn frontendTest

task cypress(type: NpmTask, dependsOn: ["startDeamon", npmInstall]) {
    description = "runs Cypress tests"

    args = ["run", "cy:jar"]
}

clean.dependsOn(cleanGeneratedApi)
